#include "imports/stdlib.fc";

global slice contract_b;

() load_data() impure {
    var ds = get_data().begin_parse();
    contract_b = ds~load_msg_addr();
    ds.end_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; contractA send message to contractB
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    (int wc, int sender) = parse_std_addr(sender_address);
    throw_unless(99, wc == 0);
    load_data();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    int amount = in_msg_body~load_coins();

    if( op == 0 ) { ;; Simple Message Example A -> B
        var msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(contract_b)
                    .store_coins(amount)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op, 32)             ;; add opcode to message body
                    .store_uint(query_id, 64)       ;; add query_id to message body
                .end_cell();
        send_raw_message(msg, 64 + 2);
    }
}
