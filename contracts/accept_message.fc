#include "imports/stdlib.fc";

global int a;
global int b;
global int c;

() load_data() impure {
    var ds = get_data().begin_parse();

    a = ds~load_uint(32);
    b = ds~load_uint(32);
    c = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(a, 32)
            .store_uint(b, 32)
            .store_uint(b, 32)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    (int wc, int sender) = parse_std_addr(sender_address);
    throw_unless(99, wc == 0);
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == 0) { ;; update and save all (normal operation)
        a = 1;
        b = 1;
        c = 1;
        save_data();
    } elseif (op == 1) { ;; update partial, accept message, update c and throw
        a = 1;
        b = 1;
        ;; c remains zero
        save_data();
        {-
            NOTE: accept_message doesn't create a "savepoint" or commit the current state changes. 
            Its primary purpose is to accept an incoming message and charge gas fees, not to persist state.

            https://docs.ton.org/v3/documentation/smart-contracts/func/docs/stdlib/#accept_message
        -}
        accept_message();  

        c = 1;
        save_data(); ;; c is saved but....

        throw(35); ;; all values will revert here regardles of having called accept_message (see docs)
    } elseif (op == 2) {
        ;; allow a message to update state even when sending ZERO gas!
        accept_message();

        ;; now update and save the contract state
        a = 1;
        b = 1;
        c = 1;
        save_data();
    }
}

(int, int, int) get_values() method_id {
    load_data();
    return (a,b,c);
}